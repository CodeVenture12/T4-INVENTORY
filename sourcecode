
#code we need to write in urls.py

from django.urls import include, path, re_path as url
from django.contrib import admin
from inventoryapp import views
from rest_framework.routers import DefaultRouter
from inventoryapp.views import (
    InventoryItemListAPIView,
    InventoryItemCategoryListAPIView,
    InventoryItemSortAPIView,
    InventoryItemEditAPIView,
)

# Add your URLs in the respective places.
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^inventory/items/$', InventoryItemListAPIView.as_view(), name='inventory_items_list'),
    url(r'^inventory/items/query/(?P<category>[\w\s]+)/$', InventoryItemCategoryListAPIView.as_view(), name='inventory_items_by_category'),
    url(r'^items/query/(?P<category>[\w\s]+)/$', InventoryItemCategoryListAPIView.as_view(), name='inventory_items_by_category'),
    url(r'^items/sort/$', InventoryItemSortAPIView.as_view(), name='inventory_items_sort'),
    url(r'^inventory/items/(?P<item_id>\d+)/$', InventoryItemEditAPIView.as_view(), name='inventory_items_edit_delete'),
]


------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Code we need to write in views.py

from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView
from inventoryapp.models import Inventory
from inventoryapp.serializer import InventorySerializer

# Create your views here
class InventoryItemListAPIView(APIView):
    def get(self, request, *args, **kwargs):
        items = Inventory.objects.all()
        serializer = InventorySerializer(items, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def post(self, request, *args, **kwargs):
        serializer = InventorySerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class InventoryItemCategoryListAPIView(APIView):
    def get(self, request, category, *args, **kwargs):
        items = Inventory.objects.filter(category=category)
        serializer = InventorySerializer(items, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

class InventoryItemSortAPIView(APIView):
    def get(self, request, *args, **kwargs):
        items = Inventory.objects.all().order_by('-price')
        serializer = InventorySerializer(items, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

class InventoryItemEditAPIView(APIView):
    def put(self, request, item_id, *args, **kwargs):
        try:
            item = Inventory.objects.get(id=item_id)
            serializer = InventorySerializer(instance=item, data=request.data, partial=True)
            if serializer.is_valid():
                serializer.save()
                return Response(serializer.data, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        except Inventory.DoesNotExist:
            return Response({'error': 'Item not found'}, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, item_id, *args, **kwargs):
        try:
            item = Inventory.objects.get(id=item_id)
            item.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        except Inventory.DoesNotExist:
            return Response({'error': 'Item not found'}, status=status.HTTP_404_NOT_FOUND)


-----------------------------------------------------------------------------------------------------------------------------------------------------------

#Code in serializer.py

from rest_framework import serializers
from inventoryapp.models import Inventory

# Create your serializers here.
class InventorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Inventory
        fields = 'all'

> Ramesh babu:
----------------------------------------------------------------------------------------------------------------------------------------------------------------

#Code in models.py 

from django.db import models

# Create your models here.
class Inventory(models.Model):
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=255)
    category = models.CharField(max_length=100)
    price = models.IntegerField()
    quantity = models.IntegerField()
    barcode = models.IntegerField(unique=True)

    def str(self):
        return self.name

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
